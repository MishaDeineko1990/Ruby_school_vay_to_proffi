1. add static pages
    1.1 create new controller for staick pages (rails g controller pages about) 

2. add method from destroy in controller
    def destroy
        @article = Article.find(params[:id])
        @article.destroy

        redirect_to articles_path
        //redirect_to action: :new //redirect on other method is valid decision
    end

3. add linc on destroy method in vue controller "index"
    | 
        <%= link_to "Destroy", article_path(article), method: :delete, data: {confirm: 'Are you sure&'} %>

4. add comments on oue aplication -- start 
    $ rails g model Comment author:string body:text article:references
    rake db:migrate


5. add to model article
    has_many :comments

5.1 add to model comment
    belongs_to :article

    validates :author, presence: true
    validates :body, presence: true

6 Change routes "articles"
    resources :articles do
        resources :comments
    end

7. rails g controller Comments

8. add action to controller
    def create 
        @article = Article.find(params[:article_id])
        @article.comments.create(comment_params)

        redirect_to article_path(@article)
    end
    
    private

    def comment_params
        params.require(:comment).permit(:author, :body)
    end  

9. Add form for "comments" on show articles vue
    <%= form_for ([@article, @article.comments.build]) do |f|%>    
        <p>
            <%= f.label :author%> <br>
            <%= f.text_field :author%>
        </p>
        <p>
            <%= f.label :body%> <br>
            <%= f.text_area :body%>
        </p>
        <p>
            <%= f.submit %>
        </p>
    <% end %>

================================


    Check the DB file for the presence of a table "comment"
        $ sqlite3 development.sqlite3
        $ .tables
        $ .mode columns
        $ .header on
        $ select * from articles;
        $ pragma table_info(comments);

        $ rails console
        $ @article = Article.(3)