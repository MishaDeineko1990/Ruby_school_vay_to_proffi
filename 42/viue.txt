1. rails new blog
2. rails g model Article title:string text:text
3. rake db:migrate
4. rails g controller articles new create edit index show   // create controller
5. add code in router.rb
    get 'home/index'
    resources :articles
6. add in  new view presintation form builder    
    <%= form_for :article, url: articles_path do |f|%>    
        <p>   
            <%= f.label :title%></br>
            <%= f.text_field :title%>
        </p>
        <p>   
            <%= f.label :text %></br>
            <%= f.text_area :text%>
        </p>
        <p>
            <%= f.submit%>
        </p>
    <%end%>



6.2  index view

    <H1>List articles</H1>

    <% @articles.each do |article|%>
        <br>
        <h3> <%= article.title %></h3>
        <p> <%= article.text %></p>
        <p>
            <%= link_to "Show", article_path(article)%> | 
            <%= link_to "Edit", edit_article_path(article)%>
        </p>
        <hr>
    <% end %>
    

6.3 show viev

    <h1><%= @article.title %></h1>

    <p>
        <%= @article.text %>
    </p>

6.4 edit view
    
<%= form_for :article, url: article_path(@article), method: :put do |f|%>    
    <p>   
        <%= f.label :title%></br>
        <%= f.text_field :title%>
    </p>
    <p>   
        <%= f.label :text %></br>
        <%= f.text_area :text%>
    </p>
    <p>
        <%= f.submit%>
    </p>

<%end%>



7. add methods to article controllers
    def new
    end

    def create
        @article = Article.new(article_params)
        
        if @article.save
            redirect_to @article
        else
            render action: 'new'
        end
    end

    def show
        @article = Article.find(params[:id])
    end

    def index
        @articles = Article.all
    end


    def edit
        @article = Article.find(params[:id])
    end

    def update
        @article = Article.find(params[:id])
        
        if  @article.update(article_params)
            redirect_to @article
        else
            render action: 'edit'
        end
    end

    private

    def article_params
        params.require(:article).permit(:title, :text)
    end  
end

8. add module aticle validation
        validates :title, presence: true
        validates :text, presence: true

9. add styleshit validation for form input
    .field_with_errors input
        {
        border-color: red;
        }
    .field_with_errors textarea
        {
            border-color: red;
        }
    .field_with_errors textfield
        {
            border-color: red;
        }






PART 2 CREATE COMMENTS TO ARTICLES

1. add static pages
    1.1 create new controller for staick pages (rails g controller pages about) 

2. add method from destroy in controller
    def destroy
        @article = Article.find(params[:id])
        @article.destroy

        redirect_to articles_path
        //redirect_to action: :new //redirect on other method is valid decision
    end

3. add linc on destroy method in vue controller "index"
    | 
        <%= link_to "Destroy", article_path(article), method: :delete, data: {confirm: 'Are you sure&'} %>

4. add comments on oue aplication -- start 
    $ rails g model Comment author:string body:text article:references
    rake db:migrate


5. add to model article
    has_many :comments

5.1 add to model comment
    belongs_to :article

    validates :author, presence: true
    validates :body, presence: true

6 Change routes "articles"
    resources :articles do
        resources :comments
    end

7. rails g controller Comments

8. add action to controller
    def create 
        @article = Article.find(params[:article_id])
        @article.comments.create(comment_params)

        redirect_to article_path(@article)
    end
    
    private

    def comment_params
        params.require(:comment).permit(:author, :body)
    end  

9. Add form for "comments" on show articles vue
    <%= form_for ([@article, @article.comments.build]) do |f|%>    
        <p>
            <%= f.label :author%> <br>
            <%= f.text_field :author%>
        </p>
        <p>
            <%= f.label :body%> <br>
            <%= f.text_area :body%>
        </p>
        <p>
            <%= f.submit %>
        </p>
    <% end %>


10 add show comment to vuew "show"
    
    <hr>
    <h2>Comments</h2>

    <% @article.comments.each do |comment| %>

        <p>
            <i>
                <%= comment.author %> said: <br>
            </i>
            <%= comment.body%>
        </p>

    <% end %>




    

================================


    Check the DB file for the presence of a table "comment"
        $ sqlite3 development.sqlite3
        $ .tables
        $ .mode columns
        $ .header on
        $ select * from articles;
        $ pragma table_info(comments);
        
    See created essence in db acros rails console
        $ rails console
        $ @article = Article.find(3)
        $ @article.comments
        $ Contact.all
        $ Contact.attribute_names


++++++++++++++++++++++++++++++
for one script in terminale
++++++++++++++++++++++++++++

rails new blog && cd blog && rails g model Article title:string text:text && rake db:migrate && rails g controller articles && cd config && rm routes.rb && echo "Rails.application.routes.draw do get home/index resources :articles end" >> routes.rb && cd ../app/views/articles && echo "<%= form_for :article, url: articles_path do |f|%> <p> <%= f.label :title%></br> <%= f.text_field :title%> </p> <p> <%= f.label :text %></br> <%= f.text_area :text%> </p> <p> <%= f.submit%> </p> <%end%>" >> new.html.erb && echo "<H1>List articles</H1> <% @articles.each do |article|%> <br><h3> <%= article.title %> </h3> <p> <%= article.text %> </p> <p> <%= link_to "Show", article_path(article)%> | <%= link_to "Edit", edit_article_path(article)%> </p> <hr> <% end %>" >> index.html.erb && echo "<h1><%= @article.title %> \</h1> <p> <%= @article.text %> </p" >> show.html.erb && echo "<%= form_for :article, url: article_path(@article), method: :put do |f|%> <p> <%= f.label :title%></br> <%= f.text_field :title%> </p> <p> <%= f.label :text %></br> <%= f.text_area :text%> </p> <p> <%= f.submit%> </p> <%end%> " >> edit.html.erb && cd ../../controllers && rm articles_controller.rb && echo "def new nend def create @article = Article.new(article_params) if @article.save redirect_to @article else render action: 'new' end end def show @article = Article.find(params[:id]) end def index @articles = Article.all end def edit @article = Article.find(params[:id]) end def update @article = Article.find(params[:id]) if @article.update(article_params) redirect_to @article else render action: 'edit' end end private def article_params params.require(:article).permit(:title, :text) end " >> articles_controller.rb && cd .. && cd models && rm article.rb && echo "class Article < ApplicationRecord validates :title, presence:true validates :text, presence: true end" >> article.rb && cd ../assets/stylesheets && echo ".field_with_errors input { border-color: red; } .field_with_errors textarea { border-color: red; } .field_with_errors textfield { border-color: red; } " >> application.css && cd ../../.. && rails s


===========================
example step by step
=======================


rails new blog && 
cd blog && 
rails g model Article title:string text:text && 
rake db:migrate && 
rails g controller articles && 
cd config && 
rm routes.rb && 
echo "Rails.application.routes.draw do 
get home/index 
resources :articles 
end" >> routes.rb && 
cd ../app/views/articles && 
echo "<%= form_for :article, url: articles_path do |f|%> 
<p> 
<%= f.label :title%></br> 
<%= f.text_field :title%> 
</p> 
<p> 
<%= f.label :text %></br> 
<%= f.text_area :text%> 
</p> 
<p> 
<%= f.submit%> 
</p> 
<%end%>" >> new.html.erb && 
echo "<H1>List articles</H1> 
<% @articles.each do |article|%> <br>
<h3> 
<%= article.title %> 
</h3> 
<p> 
<%= article.text %> 
</p> 
<p> 
<%= link_to "Show", article_path(article)%> | <%= link_to "Edit", edit_article_path(article)%> 
</p> 
<hr> 
<% end %>" >> index.html.erb && 
echo "<h1>
<%= @article.title %> 
\</h1> 
<p> 
<%= @article.text %> 
</p" >> show.html.erb && 
echo "<%= form_for :article, url: article_path(@article), method: :put do |f|%> 
<p> 
<%= f.label :title%></br> 
<%= f.text_field :title%> 
</p> 
<p> 
<%= f.label :text %></br> 
<%= f.text_area :text%> 
</p> 
<p> 
<%= f.submit%> 
</p> 
<%end%> " >> edit.html.erb && 
cd ../../controllers && 
rm articles_controller.rb && 
echo "def new 
nend 
def 
create @article = Article.new(article_params) 
if @article.save 
redirect_to @article 
else 
render action: 'new' 
end 
end 
def show 
@article = Article.find(params[:id]) 
end 
def index 
@articles = Article.all 
end 
def edit 
@article = Article.find(params[:id]) 
end 
def update 
@article = Article.find(params[:id]) 
if @article.update(article_params) 
redirect_to @article 
else 
render action: 'edit' 
end 
end 
private 
def article_params 
params.require(:article).permit(:title, :text) 
end " >> articles_controller.rb && 
cd .. && 
cd models && 
rm article.rb && 
echo "class Article < ApplicationRecord 
validates :title, presence:true 
validates :text, presence: true 
end" >> article.rb && 
cd ../assets/stylesheets && 
echo ".field_with_errors input 
{ 
border-color: red; 
} 
.field_with_errors textarea 
{ 
border-color: red; 
} 
.field_with_errors textfield 
{ 
border-color: red; 
} " >> application.css && 
cd ../../.. && 
rails s


rails webpacker:install

